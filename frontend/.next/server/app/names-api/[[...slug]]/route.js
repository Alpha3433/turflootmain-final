"use strict";(()=>{var e={};e.id=3834,e.ids=[3834],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},21772:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>x,patchFetch:()=>S,requestAsyncStorage:()=>N,routeModule:()=>D,serverHooks:()=>A,staticGenerationAsyncStorage:()=>P});var r={};s.r(r),s.d(r,{GET:()=>h,OPTIONS:()=>m,POST:()=>g});var a=s(49303),o=s(88716),n=s(60670),u=s(87070),l=s(38013);let i=null,c=null;async function d(){if(c)return c;try{return i||(i=new l.MongoClient(process.env.MONGO_URL,{serverSelectionTimeoutMS:5e3,connectTimeoutMS:1e4,maxPoolSize:10}),await i.connect()),c=i.db(process.env.DB_NAME||"turfloot_db")}catch(e){throw console.error("❌ Database connection error:",e),e}}let p={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With, Accept, Origin","Cache-Control":"no-store, no-cache, must-revalidate","X-API-Server":"TurfLoot-NamesAPI-Bypass"};async function m(){return new u.NextResponse(null,{status:200,headers:p})}async function h(e,{params:t}){let{slug:s}=t,r=new URL(e.url);console.log("\uD83D\uDD0D NAMES-API GET:",s,r.searchParams.toString());try{let e=s[0]||"get";if("search"===e){let e=r.searchParams.get("q"),t=r.searchParams.get("userId");if(console.log("\uD83D\uDD0D Names search bypass:",{q:e,userId:t}),!e||!t)return u.NextResponse.json({error:"Query and userId required"},{status:400,headers:p});let s={users:[],total:0,timestamp:new Date().toISOString()};return u.NextResponse.json(s,{headers:p})}if("get"===e){let e=r.searchParams.get("userId");if(!e)return u.NextResponse.json({error:"userId required"},{status:400,headers:p});let t=(await d()).collection("names"),s=await t.findOne({userId:e});return u.NextResponse.json({success:!0,customName:s?.customName||null,timestamp:new Date().toISOString()},{headers:p})}return u.NextResponse.json({error:"Invalid action"},{status:400,headers:p})}catch(e){return console.error("❌ Names API error:",e),u.NextResponse.json({error:"Internal error"},{status:500,headers:p})}}async function g(e,{params:t}){let{slug:s}=t;console.log("\uD83D\uDCDD NAMES-API POST:",s);try{let t=await e.json(),r=s[0]||"update";if("update"===r){let{userId:e,customName:s}=t;if(console.log("\uD83D\uDCDD Names update bypass:",{userId:e,customName:s}),!e||!s)return u.NextResponse.json({error:"userId and customName required"},{status:400,headers:p});let r=(await d()).collection("names");return await r.replaceOne({userId:e},{userId:e,customName:s,updatedAt:new Date,createdAt:new Date},{upsert:!0}),console.log("✅ Names API bypass - name saved successfully"),u.NextResponse.json({success:!0,message:"Name saved successfully via bypass route",timestamp:new Date().toISOString()},{headers:p})}return u.NextResponse.json({error:"Invalid action"},{status:400,headers:p})}catch(e){return console.error("❌ Names API POST error:",e),u.NextResponse.json({error:"Failed to save name"},{status:500,headers:p})}}let D=new a.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/names-api/[[...slug]]/route",pathname:"/names-api/[[...slug]]",filename:"route",bundlePath:"app/names-api/[[...slug]]/route"},resolvedPagePath:"/app/frontend/app/names-api/[[...slug]]/route.js",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:N,staticGenerationAsyncStorage:P,serverHooks:A}=D,x="/names-api/[[...slug]]/route";function S(){return(0,n.patchFetch)({serverHooks:A,staticGenerationAsyncStorage:P})}}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[8948,5972],()=>s(21772));module.exports=r})();