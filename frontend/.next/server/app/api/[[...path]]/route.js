"use strict";(()=>{var e={};e.id=998,e.ids=[998],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},97197:(e,o,t)=>{t.r(o),t.d(o,{originalPathname:()=>g,patchFetch:()=>v,requestAsyncStorage:()=>y,routeModule:()=>p,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var r={};t.r(r),t.d(r,{GET:()=>u,OPTIONS:()=>d,POST:()=>c});var s=t(49303),a=t(88716),n=t(60670),l=t(87070);let i={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With, Accept, Origin","Cache-Control":"no-store, must-revalidate",Pragma:"no-cache",Expires:"0","X-Frame-Options":"ALLOWALL","Content-Security-Policy":"frame-ancestors *;","X-API-Gateway":"TurfLoot-NextJS","X-External-Access":"Enhanced"};async function u(e,{params:o}){let{path:r}=o,s=r?.join("/")||"";console.log("\uD83D\uDE80 GET HANDLER CALLED - PATH:",s),console.error("\uD83D\uDD0D DEBUG: route value =",JSON.stringify(s),"typeof =",typeof s),console.error('\uD83D\uDD0D DEBUG: route === "servers" ?',"servers"===s);try{if(!r||0===r.length)return l.NextResponse.json({message:"TurfLoot API v2.0",service:"turfloot-api",status:"operational",features:["auth","blockchain","multiplayer"],timestamp:new Date().toISOString()},{headers:i});if("servers"===s){console.error("\uD83D\uDEA8 SERVERS ENDPOINT HIT: route === servers is TRUE");try{console.log("\uD83C\uDFAE Colyseus Server Browser API: Fetching available Colyseus rooms...");let e=[],o=0;try{let{MongoClient:r}=await Promise.resolve().then(t.t.bind(t,38013,23)),s=new r(process.env.MONGO_URL);await s.connect();let a=s.db("turfloot").collection("game_sessions"),n=new Date(Date.now()-6e5);console.log(`🔍 Querying for sessions active since: ${n}`);let l=await a.find({lastActivity:{$gte:n},mode:{$regex:/colyseus/i},status:"active"}).toArray();console.log(`🔍 Query found ${l.length} active sessions:`,l.map(e=>({roomId:e.roomId,userId:e.userId,mode:e.mode,lastActivity:e.lastActivity,status:e.status}))),o=l.length,console.log(`📊 Database shows ${o} active Colyseus players`);let i=new Map;l.forEach(e=>{let o=e.roomId||"colyseus-arena-default",t=e.region||"AU",r=e.mode||"colyseus-multiplayer";i.has(o)?i.get(o).currentPlayers+=1:i.set(o,{id:o,name:0===i.size?"TurfLoot Arena":`Arena Battle #${i.size+1}`,serverType:"colyseus",roomType:"arena",region:t,mode:r,currentPlayers:1,maxPlayers:50,status:"active",avgWaitTime:"Join Now",entryFee:0,prizePool:0,colyseusRoomId:o,colyseusEndpoint:"wss://au-syd-ab3eaf4e.colyseus.cloud",joinable:!0,lastActivity:e.lastActivity||new Date,canJoin:!0})}),e=Array.from(i.values()),console.log(`📊 Found ${e.length} active Colyseus rooms from database`),await s.close()}catch(e){console.warn(`⚠️ Could not query database for Colyseus rooms:`,e.message),o=0}let r=[];return e.length>0?r.push(...e):r.push({id:"colyseus-arena-global",roomType:"arena",name:"TurfLoot Arena",region:"Australia",regionId:"au-syd",displayName:"Global Arena",mode:"multiplayer",gameType:"Arena Battle",description:"Real-time multiplayer arena with up to 50 players",maxPlayers:50,minPlayers:1,currentPlayers:0,waitingPlayers:0,isRunning:!0,ping:null,avgWaitTime:"Join Now",difficulty:"All Players",entryFee:0,serverFee:0,totalCost:0,potentialWinning:0,prizePool:0,stake:0,status:"waiting",serverType:"colyseus",endpoint:"wss://au-syd-ab3eaf4e.colyseus.cloud",lastUpdated:new Date().toISOString(),timestamp:new Date().toISOString(),canJoin:!0,colyseusEndpoint:"wss://au-syd-ab3eaf4e.colyseus.cloud",joinable:!0}),console.log(`📊 Returning ${r.length} Colyseus server(s) with ${o} total players`),l.NextResponse.json({servers:r,totalPlayers:o,totalActiveServers:r.filter(e=>"active"===e.status).length,totalServers:r.length,practiceServers:0,cashServers:0,colyseusEnabled:!0,colyseusEndpoint:"wss://au-syd-ab3eaf4e.colyseus.cloud",lastUpdated:new Date().toISOString(),timestamp:new Date().toISOString()},{headers:i})}catch(e){return console.error("❌ Error in Colyseus server browser API:",e),l.NextResponse.json({error:"Failed to fetch Colyseus servers",message:e.message,servers:[],totalPlayers:0,totalActiveServers:0,colyseusEnabled:!1},{status:500,headers:i})}}return l.NextResponse.json({error:"Not found"},{status:404,headers:i})}catch(e){return console.error("GET handler error:",e),l.NextResponse.json({error:"Internal Server Error"},{status:500,headers:i})}}async function c(e,{params:o}){let{path:t}=o,r=t?.join("/")||"";console.log("\uD83D\uDE80 POST HANDLER CALLED - PATH:",r);let s={};try{s=await e.json()}catch(e){console.log("No JSON body provided")}try{if("hathora/create-room"===r)try{let{gameMode:e="practice",region:o,maxPlayers:t=50,stakeAmount:r=0}=s;console.log(`🚀 Creating Hathora room with gameMode: ${e}, region: ${o}, stakeAmount: ${r}`);let a=await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/hathora/room`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({gameMode:e,region:o,maxPlayers:t,stakeAmount:r})});if(!a.ok){let e=await a.json();throw Error(`Hathora room creation failed: ${e.error||a.statusText}`)}let n=await a.json();if(!n.success)throw Error(`Hathora room creation failed: ${n.error}`);return console.log(`✅ Created Hathora room: ${n.roomId}`),l.NextResponse.json({success:!0,roomId:n.roomId,gameMode:n.gameMode,region:n.region,maxPlayers:n.maxPlayers,stakeAmount:n.stakeAmount,host:n.host,port:n.port,playerToken:n.playerToken,isHathoraRoom:!0,isMockRoom:!1,timestamp:new Date().toISOString()},{headers:i})}catch(e){return console.error("❌ Error creating Hathora room:",e),l.NextResponse.json({success:!1,error:"Failed to create Hathora room",message:e.message,timestamp:new Date().toISOString()},{status:500,headers:i})}return l.NextResponse.json({error:"Not found"},{status:404,headers:i})}catch(e){return console.error("POST handler error:",e),l.NextResponse.json({error:"Internal Server Error"},{status:500,headers:i})}}async function d(e){return new l.NextResponse(null,{status:200,headers:i})}let p=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/[[...path]]/route",pathname:"/api/[[...path]]",filename:"route",bundlePath:"app/api/[[...path]]/route"},resolvedPagePath:"/app/frontend/app/api/[[...path]]/route.js",nextConfigOutput:"standalone",userland:r}),{requestAsyncStorage:y,staticGenerationAsyncStorage:m,serverHooks:h}=p,g="/api/[[...path]]/route";function v(){return(0,n.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}}};var o=require("../../../webpack-runtime.js");o.C(e);var t=e=>o(o.s=e),r=o.X(0,[8948,5972],()=>t(97197));module.exports=r})();