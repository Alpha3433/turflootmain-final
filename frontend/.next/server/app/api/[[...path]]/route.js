"use strict";(()=>{var e={};e.id=998,e.ids=[998],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},97197:(e,r,o)=>{o.r(r),o.d(r,{originalPathname:()=>A,patchFetch:()=>E,requestAsyncStorage:()=>d,routeModule:()=>h,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var t={};o.r(t),o.d(t,{GET:()=>u,OPTIONS:()=>p,POST:()=>l});var a=o(49303),s=o(88716),n=o(60670),i=o(87070);let c={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With, Accept, Origin","Cache-Control":"no-store, must-revalidate",Pragma:"no-cache",Expires:"0","X-Frame-Options":"ALLOWALL","Content-Security-Policy":"frame-ancestors *;","X-API-Gateway":"TurfLoot-NextJS","X-External-Access":"Enhanced"};async function u(e,{params:r}){let{path:o}=r;console.log("\uD83D\uDE80 GET HANDLER CALLED - PATH:",o?.join("/")||"");try{if(!o||0===o.length)return i.NextResponse.json({message:"TurfLoot API v2.0",service:"turfloot-api",status:"operational",features:["auth","blockchain","multiplayer"],timestamp:new Date().toISOString()},{headers:c});return i.NextResponse.json({error:"Not found"},{status:404,headers:c})}catch(e){return console.error("GET handler error:",e),i.NextResponse.json({error:"Internal Server Error"},{status:500,headers:c})}}async function l(e,{params:r}){let{path:o}=r,t=o?.join("/")||"";console.log("\uD83D\uDE80 POST HANDLER CALLED - PATH:",t);let a={};try{a=await e.json()}catch(e){console.log("No JSON body provided")}try{if("hathora/create-room"===t)try{let{gameMode:e="practice",region:r,maxPlayers:o=50,stakeAmount:t=0}=a;console.log(`🚀 Creating Hathora room with gameMode: ${e}, region: ${r}, stakeAmount: ${t}`);let s=await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/hathora/room`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({gameMode:e,region:r,maxPlayers:o,stakeAmount:t})});if(!s.ok){let e=await s.json();throw Error(`Hathora room creation failed: ${e.error||s.statusText}`)}let n=await s.json();if(!n.success)throw Error(`Hathora room creation failed: ${n.error}`);return console.log(`✅ Created Hathora room: ${n.roomId}`),i.NextResponse.json({success:!0,roomId:n.roomId,gameMode:n.gameMode,region:n.region,maxPlayers:n.maxPlayers,stakeAmount:n.stakeAmount,host:n.host,port:n.port,playerToken:n.playerToken,isHathoraRoom:!0,isMockRoom:!1,timestamp:new Date().toISOString()},{headers:c})}catch(e){return console.error("❌ Error creating Hathora room:",e),i.NextResponse.json({success:!1,error:"Failed to create Hathora room",message:e.message,timestamp:new Date().toISOString()},{status:500,headers:c})}return i.NextResponse.json({error:"Not found"},{status:404,headers:c})}catch(e){return console.error("POST handler error:",e),i.NextResponse.json({error:"Internal Server Error"},{status:500,headers:c})}}async function p(e){return new i.NextResponse(null,{status:200,headers:c})}let h=new a.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/[[...path]]/route",pathname:"/api/[[...path]]",filename:"route",bundlePath:"app/api/[[...path]]/route"},resolvedPagePath:"/app/frontend/app/api/[[...path]]/route.js",nextConfigOutput:"standalone",userland:t}),{requestAsyncStorage:d,staticGenerationAsyncStorage:m,serverHooks:g}=h,A="/api/[[...path]]/route";function E(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}}};var r=require("../../../webpack-runtime.js");r.C(e);var o=e=>r(r.s=e),t=r.X(0,[8948,5972],()=>o(97197));module.exports=t})();