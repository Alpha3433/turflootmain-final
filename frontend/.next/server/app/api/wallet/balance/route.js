"use strict";(()=>{var e={};e.id=8581,e.ids=[8581],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},43807:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>m,patchFetch:()=>v,requestAsyncStorage:()=>_,routeModule:()=>f,serverHooks:()=>y,staticGenerationAsyncStorage:()=>D});var o={};a.r(o),a.d(o,{GET:()=>b,OPTIONS:()=>h});var n=a(49303),l=a(88716),r=a(60670),s=a(87070),c=a(38013);!function(){var e=Error("Cannot find module 'jsonwebtoken'");throw e.code="MODULE_NOT_FOUND",e}();let i=process.env.JWT_SECRET||"turfloot-secret-key-change-in-production",d=process.env.MONGO_URL||"mongodb://localhost:27017/turfloot",u=process.env.HELIUS_API_KEY,p=null;async function g(){if(!p)try{console.log("\uD83D\uDD17 Connecting to MongoDB for wallet balance"),p=new c.MongoClient(d,{serverSelectionTimeoutMS:5e3,connectTimeoutMS:1e4,maxPoolSize:10}),await p.connect(),console.log("✅ MongoDB connected successfully")}catch(e){throw console.error("❌ MongoDB connection failed:",e),e}return p.db("turfloot_db")}async function w(e){if(!u||!e)return console.log("⚠️ No Helius API key or wallet address provided"),0;try{console.log(`🔗 Fetching SOL balance for wallet: ${e}`);let t=`https://mainnet.helius-rpc.com/?api-key=${u}`,a=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({jsonrpc:"2.0",id:1,method:"getBalance",params:[e]})});if(a.ok){let e=await a.json();if(e&&e.result&&void 0!==e.result.value){let t=parseFloat((e.result.value/1e9).toFixed(4));return console.log(`💰 SOL balance fetched: ${t} SOL`),t}}else console.warn("⚠️ Helius API response not OK:",a.status,a.statusText)}catch(e){console.log("⚠️ Error fetching SOL balance from Helius:",e.message)}return 0}async function b(e){let t={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"};try{let a=e.headers.get("authorization"),o=null;if(a&&a.startsWith("Bearer ")&&(o=a.substring(7)),console.log("\uD83D\uDD0D Wallet balance request - Token present:",!!o),o&&o.startsWith("testing-"))try{let e=JSON.parse(atob(o.substring(8)));console.log("\uD83E\uDDEA Testing token payload:",e);let a=50+100*Math.random(),n={balance:parseFloat(a.toFixed(2)),currency:"USD",sol_balance:parseFloat((.1+.5*Math.random()).toFixed(4)),usdc_balance:parseFloat((.3*a).toFixed(2)),wallet_address:e.wallet_address||"F7zDew151bya8KatZiHF6EXDBi8DVNJvrLE619vwypvG"};return console.log("\uD83C\uDFAF Returning testing balance:",n),s.NextResponse.json(n,{headers:t})}catch(e){console.error("❌ Error parsing testing token:",e)}let n=null;if(o&&!o.startsWith("testing-"))try{let e=Object(function(){var e=Error("Cannot find module 'jsonwebtoken'");throw e.code="MODULE_NOT_FOUND",e}())(o,i);n=e,console.log("✅ JWT authenticated user:",e.userId||e.id)}catch(e){console.log("⚠️ JWT verification failed, checking if it's a Privy token:",e.message);try{let e=o.split(".")[1];if(e){let t=JSON.parse(Buffer.from(e,"base64").toString("utf-8"));console.log("\uD83D\uDD0D Privy token payload:",{userId:t.sub,email:t.email,walletAddress:t.wallet?.address}),n={id:t.sub,privy_id:t.sub,email:t.email,jwt_wallet_address:t.wallet?.address,isPrivyAuth:!0},console.log("✅ Privy token authenticated user:",n.id)}}catch(e){console.log("⚠️ Privy token parsing also failed:",e.message)}}if(!n&&(!o||!o.startsWith("testing-")))return console.log("\uD83C\uDFAD Providing guest balance for unauthenticated request"),s.NextResponse.json({balance:0,currency:"USD",sol_balance:0,usdc_balance:0,wallet_address:"Not connected"},{headers:t});if(n){let e=(await g()).collection("users"),a=await e.findOne({$or:[{id:n.id},{privy_id:n.privy_id||n.id}]});if(!a){console.log("⚠️ User not found in database, creating with default balance");let a={id:n.id,privy_id:n.privy_id||n.id,email:n.email,wallet_address:n.jwt_wallet_address,balance:25,created_at:new Date,updated_at:new Date};await e.insertOne(a),console.log("✅ Created new user with default balance:",a.id);let o={balance:25,currency:"USD",sol_balance:.085,usdc_balance:5,wallet_address:n.jwt_wallet_address||"No wallet connected"};return s.NextResponse.json(o,{headers:t})}let o=function(e,t){let a=[t?.jwt_wallet_address,e?.wallet_address,e?.embedded_wallet_address,e?.privy_wallet_address].find(e=>e&&"Not connected"!==e);return console.log(`🔍 Wallet address resolution: ${a||"No wallet found"}`),a}(a,n),l=0,r=a.balance||25;if(o){l=await w(o);let e=160*l;r=parseFloat((r+e).toFixed(2))}let c={balance:r,currency:"USD",sol_balance:l,usdc_balance:parseFloat((.2*r).toFixed(2)),wallet_address:o||"Not connected"};return console.log("\uD83D\uDCB0 Final balance response:",c),s.NextResponse.json(c,{headers:t})}return console.log("⚠️ Unhandled case, returning guest balance"),s.NextResponse.json({balance:0,currency:"USD",sol_balance:0,usdc_balance:0,wallet_address:"Not connected"},{headers:t})}catch(e){return console.error("❌ Error in wallet balance endpoint:",e),s.NextResponse.json({error:"Internal Server Error",balance:0,currency:"USD",sol_balance:0,usdc_balance:0,wallet_address:"Error loading wallet"},{status:500,headers:t})}}async function h(e){return new s.NextResponse(null,{status:200,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"}})}let f=new n.AppRouteRouteModule({definition:{kind:l.x.APP_ROUTE,page:"/api/wallet/balance/route",pathname:"/api/wallet/balance",filename:"route",bundlePath:"app/api/wallet/balance/route"},resolvedPagePath:"/app/frontend/app/api/wallet/balance/route.js",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:_,staticGenerationAsyncStorage:D,serverHooks:y}=f,m="/api/wallet/balance/route";function v(){return(0,r.patchFetch)({serverHooks:y,staticGenerationAsyncStorage:D})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),o=t.X(0,[8948,5972],()=>a(43807));module.exports=o})();