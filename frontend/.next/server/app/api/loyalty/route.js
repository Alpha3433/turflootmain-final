"use strict";(()=>{var e={};e.id=5494,e.ids=[5494],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},72202:(e,t,a)=>{let r;a.r(t),a.d(t,{originalPathname:()=>R,patchFetch:()=>D,requestAsyncStorage:()=>P,routeModule:()=>h,serverHooks:()=>S,staticGenerationAsyncStorage:()=>f});var o={};a.r(o),a.d(o,{GET:()=>m,POST:()=>y,PUT:()=>p});var n=a(49303),s=a(88716),l=a(60670),i=a(87070),d=a(38013);let g=process.env.MONGO_URL;if(!process.env.MONGO_URL)throw Error("Please add your Mongo URI to .env.local");async function u(){try{let e=await r,t=e.db("turfloot");return{client:e,db:t}}catch(e){throw console.error("MongoDB connection error:",e),e}}r=new d.MongoClient(g,{}).connect();var c=a(27193);async function m(e){try{let{searchParams:t}=new URL(e.url),a=t.get("userIdentifier");if(!a)return i.NextResponse.json({error:"User identifier required"},{status:400});console.log(`🎯 Loyalty GET request for user: ${a}`);let{db:r}=await u(),o=r.collection("user_loyalty"),n=await o.findOne({userIdentifier:a});n||(n={userIdentifier:a,gamesPlayed:0,totalWagered:0,tier:"BRONZE",createdAt:new Date,monthlyStats:{gamesThisMonth:0,wageredThisMonth:0,month:new Date().getMonth(),year:new Date().getFullYear()}},await o.insertOne(n),console.log(`🆕 Created new loyalty profile for user: ${a}`)),c.ZP.shouldResetMonthlyStats(n)&&(console.log(`📅 Performing monthly reset for user: ${a}`),n=c.ZP.performMonthlyReset(n),await o.updateOne({userIdentifier:a},{$set:n}));let s=c.ZP.calculateUserTier(n),l=c.ZP.getUserFeePercentage(n),d=c.ZP.getTierInfo(s),g=c.ZP.calculateTierProgress(n),m=c.ZP.getAllTiers(),y={userStats:{gamesPlayed:n.gamesPlayed||0,totalWagered:n.totalWagered||0,monthlyStats:n.monthlyStats},currentTier:s,feePercentage:l,tierInfo:d,progress:g,allTiers:m,lastUpdated:new Date().toISOString()};return console.log(`✅ Loyalty data retrieved for ${a}: ${s} tier (${l}% fees)`),i.NextResponse.json(y)}catch(e){return console.error("❌ Error fetching loyalty data:",e),i.NextResponse.json({error:"Failed to fetch loyalty data",message:e.message},{status:500})}}async function y(e){try{let{userIdentifier:t,gameData:a}=await e.json();if(!t||!a)return i.NextResponse.json({error:"User identifier and game data required"},{status:400});console.log(`🎯 Loyalty POST request - updating stats for ${t}:`,a);let{db:r}=await u(),o=r.collection("user_loyalty"),n=await o.findOne({userIdentifier:t});n||(n={userIdentifier:t,gamesPlayed:0,totalWagered:0,createdAt:new Date,monthlyStats:{gamesThisMonth:0,wageredThisMonth:0,month:new Date().getMonth(),year:new Date().getFullYear()}});let s=c.ZP.calculateUserTier(n),l=c.ZP.updateUserLoyaltyStats(n,a);l.lastUpdated=new Date;let d=c.ZP.calculateUserTier(l),g=c.ZP.getUserFeePercentage(l);await o.updateOne({userIdentifier:t},{$set:l},{upsert:!0});let m=c.ZP.getTierUpgradeNotification(s,d),y=c.ZP.calculateTierProgress(l),p={success:!0,userStats:{gamesPlayed:l.gamesPlayed,totalWagered:l.totalWagered,monthlyStats:l.monthlyStats},oldTier:s,newTier:d,feePercentage:g,tierUpgrade:m,progress:y,message:`Stats updated: ${l.gamesPlayed} games, $${l.totalWagered.toFixed(2)} wagered`};return console.log(`✅ Loyalty stats updated for ${t}: ${s} → ${d} (${g}% fees)`),m.isUpgrade&&console.log(`🎉 TIER UPGRADE! ${t} promoted from ${s} to ${d}`),i.NextResponse.json(p)}catch(e){return console.error("❌ Error updating loyalty stats:",e),i.NextResponse.json({error:"Failed to update loyalty stats",message:e.message},{status:500})}}async function p(e){try{let{action:t,config:a}=await e.json();if("update_config"===t)return console.log("\uD83D\uDD27 Loyalty config update requested:",a),i.NextResponse.json({success:!0,message:"Config update requested (not implemented in demo)",currentConfig:c.ZP.LOYALTY_CONFIG});return i.NextResponse.json({error:"Invalid action"},{status:400})}catch(e){return console.error("❌ Error updating loyalty config:",e),i.NextResponse.json({error:"Failed to update loyalty config",message:e.message},{status:500})}}let h=new n.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/loyalty/route",pathname:"/api/loyalty",filename:"route",bundlePath:"app/api/loyalty/route"},resolvedPagePath:"/app/frontend/app/api/loyalty/route.js",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:P,staticGenerationAsyncStorage:f,serverHooks:S}=h,R="/api/loyalty/route";function D(){return(0,l.patchFetch)({serverHooks:S,staticGenerationAsyncStorage:f})}},27193:(e,t,a)=>{a.d(t,{ZP:()=>s});let r={tiers:{BRONZE:{name:"Bronze",feePercentage:10,minGamesPlayed:0,minTotalWagered:0,color:"#CD7F32",icon:"\uD83E\uDD49",benefits:["Standard gameplay","10% server fee"]},SILVER:{name:"Silver",feePercentage:9,minGamesPlayed:50,minTotalWagered:100,color:"#C0C0C0",icon:"\uD83E\uDD48",benefits:["Reduced fees","9% server fee","Priority matching"]},GOLD:{name:"Gold",feePercentage:8,minGamesPlayed:250,minTotalWagered:500,color:"#FFD700",icon:"\uD83E\uDD47",benefits:["Lowest fees","8% server fee","VIP support","Exclusive tournaments"]}},monthlyReset:{enabled:!0,carryoverPerks:{GOLD:"SILVER",SILVER:"BRONZE",BRONZE:"BRONZE"}}};function o(e){let{gamesPlayed:t=0,totalWagered:a=0}=e;return t>=r.tiers.GOLD.minGamesPlayed&&a>=r.tiers.GOLD.minTotalWagered?"GOLD":t>=r.tiers.SILVER.minGamesPlayed&&a>=r.tiers.SILVER.minTotalWagered?"SILVER":"BRONZE"}function n(e){return r.tiers[e]||r.tiers.BRONZE}let s={LOYALTY_CONFIG:r,calculateUserTier:o,getUserFeePercentage:function(e){let t=o(e);return r.tiers[t].feePercentage},getTierInfo:n,getAllTiers:function(){return r.tiers},calculateTierProgress:function(e){let{gamesPlayed:t=0,totalWagered:a=0}=e,n=o(e),s=null,l=null;if("BRONZE"===n){s="SILVER";let e=r.tiers.SILVER;l={gamesProgress:{current:t,required:e.minGamesPlayed,percentage:Math.min(100,t/e.minGamesPlayed*100)},wageredProgress:{current:a,required:e.minTotalWagered,percentage:Math.min(100,a/e.minTotalWagered*100)}}}else if("SILVER"===n){s="GOLD";let e=r.tiers.GOLD;l={gamesProgress:{current:t,required:e.minGamesPlayed,percentage:Math.min(100,t/e.minGamesPlayed*100)},wageredProgress:{current:a,required:e.minTotalWagered,percentage:Math.min(100,a/e.minTotalWagered*100)}}}return{currentTier:n,nextTier:s,progress:l,isMaxTier:"GOLD"===n}},updateUserLoyaltyStats:function(e,t){let{stake:a=0,gameResult:r=null}=t;return{...e,gamesPlayed:(e.gamesPlayed||0)+1,totalWagered:(e.totalWagered||0)+a,lastGameDate:new Date().toISOString(),monthlyStats:{...e.monthlyStats,gamesThisMonth:(e.monthlyStats?.gamesThisMonth||0)+1,wageredThisMonth:(e.monthlyStats?.wageredThisMonth||0)+a,month:new Date().getMonth(),year:new Date().getFullYear()}}},shouldResetMonthlyStats:function(e){let t=new Date().getMonth(),a=new Date().getFullYear();return!e.monthlyStats||e.monthlyStats.month!==t||e.monthlyStats.year!==a},performMonthlyReset:function(e){let t=o(e),a=r.monthlyReset.carryoverPerks[t],n={gamesPlayed:0,totalWagered:0};return"SILVER"===a?n={gamesPlayed:r.tiers.SILVER.minGamesPlayed,totalWagered:r.tiers.SILVER.minTotalWagered}:"GOLD"===a&&(n={gamesPlayed:r.tiers.GOLD.minGamesPlayed,totalWagered:r.tiers.GOLD.minTotalWagered}),{...e,gamesPlayed:n.gamesPlayed,totalWagered:n.totalWagered,previousTier:t,carryoverTier:a,lastReset:new Date().toISOString(),monthlyStats:{gamesThisMonth:0,wageredThisMonth:0,month:new Date().getMonth(),year:new Date().getFullYear()}}},getTierUpgradeNotification:function(e,t){let a=n(t);return{isUpgrade:t!==e,oldTier:e,newTier:t,newFeePercentage:a.feePercentage,newTierInfo:a,message:`🎉 Congratulations! You've been promoted to ${a.name} tier!`,benefits:a.benefits,feeSavings:`Server fees reduced to ${a.feePercentage}%!`}}}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[8948,5972],()=>a(72202));module.exports=r})();