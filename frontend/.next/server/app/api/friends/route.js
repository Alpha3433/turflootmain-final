"use strict";(()=>{var e={};e.id=2106,e.ids=[2106],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},24283:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>A,patchFetch:()=>$,requestAsyncStorage:()=>j,routeModule:()=>N,serverHooks:()=>O,staticGenerationAsyncStorage:()=>R});var s={};t.r(s),t.d(s,{GET:()=>m,POST:()=>w,PUT:()=>x});var n=t(49303),i=t(88716),o=t(60670),a=t(87070),u=t(38013);let d=null,l=null;async function c(){if(d&&l)return{client:d,db:l};let e=new u.MongoClient(process.env.MONGO_URL);await e.connect();let r=e.db(process.env.DB_NAME||"turfloot_db");return d=e,l=r,{client:e,db:r}}async function f(e){try{let r=await e.collection("users").deleteMany({$or:[{userIdentifier:{$regex:/(test|debug|mock|demo|cashout\.test|debug\.test)/i}},{username:{$regex:/(test|debug|mock|demo|cashout\.test|debug\.test)/i}},{$and:[{email:{$in:[null,""]}},{walletAddress:{$in:[null,""]}},{userIdentifier:{$regex:/^(test_|mock_|debug_|cashout_)/i}}]}]});r.deletedCount>0&&console.log(`üßπ Cleaned up ${r.deletedCount} test users from database`)}catch(e){console.error("‚ùå Error cleaning up test users:",e)}}async function p(e){try{let{db:r}=await c();await f(r);let t=await r.collection("users").find({userIdentifier:{$ne:e,$not:{$regex:/(test|debug|mock|demo|cashout\.test|debug\.test)/i}},$or:[{email:{$exists:!0,$ne:null,$ne:""}},{walletAddress:{$exists:!0,$ne:null,$ne:""}}]}).toArray(),s=await r.collection("friends").find({userIdentifier:e}).toArray(),n=await r.collection("friend_requests").find({$or:[{fromUserIdentifier:e},{fromUserId:e}],status:"pending"}).toArray(),i=await r.collection("friend_requests").find({$or:[{toUserIdentifier:e},{toUserId:e}],status:"pending"}).toArray(),o=new Set(s.map(e=>e.friendUserIdentifier)),a=new Set(n.map(e=>e.toUserIdentifier)),u=new Set(i.map(e=>e.fromUserIdentifier));return t.filter(e=>{let r=e.userIdentifier;return!o.has(r)&&!a.has(r)&&!u.has(r)}).map(e=>({username:e.username||e.displayName||`User_${e.userIdentifier.slice(-4)}`,status:e.isOnline?"online":"offline",joinedAt:e.createdAt||e.joinedAt||new Date().toISOString(),gamesPlayed:e.gamesPlayed||0}))}catch(e){return console.error("‚ùå Error fetching Privy users:",e),[]}}async function g(e,r){try{let{db:t}=await c();if(!e||e.match(/(test|debug|mock|demo|cashout\.test|debug\.test)/i)||!r.email&&!r.walletAddress)return console.log("‚ö†Ô∏è Skipping test/invalid user storage:",e),!1;if(!r.email&&!r.walletAddress)return console.log("‚ö†Ô∏è Skipping user without email or wallet:",e),!1;let s={userIdentifier:e,username:r.username||r.displayName||`User_${e.slice(-4)}`,displayName:r.displayName,email:r.email,walletAddress:r.walletAddress,createdAt:new Date().toISOString(),lastSeenAt:new Date().toISOString(),isOnline:!0,gamesPlayed:0,equippedSkin:r.equippedSkin||{type:"circle",color:"#3b82f6",pattern:"solid"}};return await t.collection("users").updateOne({userIdentifier:e},{$set:s},{upsert:!0}),console.log("‚úÖ Real Privy user stored/updated:",e),!0}catch(e){return console.error("‚ùå Error storing Privy user:",e),!1}}async function m(e){try{let{searchParams:r}=new URL(e.url),t=r.get("userIdentifier"),s=r.get("type");if(console.log("\uD83D\uDC65 Friends/Requests/Users list request:",{userIdentifier:t,requestType:s}),!t||"guest"===t)return a.NextResponse.json({success:!0,friends:[],requests:{sent:[],received:[]},users:[],message:"Please log in to see other users"});if("users"===s){let e=await p(t);return console.log("‚úÖ Available Privy users retrieved:",e.length,"users"),a.NextResponse.json({success:!0,users:e,count:e.length})}if("requests"===s){let{db:e}=await c(),r=await e.collection("friend_requests").find({$or:[{fromUserIdentifier:t},{fromUserId:t}],status:"pending"}).toArray(),s=await e.collection("friend_requests").find({$or:[{toUserIdentifier:t},{toUserId:t}],status:"pending"}).toArray(),n={sent:r,received:s};return console.log("‚úÖ Friend requests retrieved from database:",n),a.NextResponse.json({success:!0,requests:n,sentCount:r.length,receivedCount:s.length})}{let{db:e}=await c(),r=(await e.collection("friends").find({userIdentifier:t}).toArray()).map(e=>({id:e.friendUserIdentifier,username:e.friendUsername,status:e.status,addedAt:e.addedAt,lastSeen:e.lastSeen,isOnline:e.isOnline||!1}));return console.log("‚úÖ Friends list retrieved from database:",r.length,"friends"),console.log("\uD83D\uDD0D Friend data sample:",r[0]||"No friends"),a.NextResponse.json({success:!0,friends:r,count:r.length})}}catch(e){return console.error("‚ùå Error fetching friends/requests/users:",e),a.NextResponse.json({error:"Failed to fetch friends/requests/users list"},{status:500})}}async function w(e){try{let{action:r,userIdentifier:t,friendIdentifier:s,friendUsername:n,requestId:i,userData:o}=await e.json();if(console.log("\uD83D\uDC65 Friend action request:",{action:r,userIdentifier:t,friendIdentifier:s,friendUsername:n,requestId:i}),console.log("\uD83D\uDD0D Authentication debug:",{userIdentifier:t||"undefined",userIdentifierType:typeof t,isGuest:"guest"===t,isEmpty:!t}),!t||"guest"===t)return console.log("‚ùå Authentication failed:",{userIdentifier:t}),a.NextResponse.json({error:"User authentication required"},{status:401});switch(r){case"register_user":return await y(t,o);case"send_request":return await q(t,n);case"accept_request":return await I(t,i);case"decline_request":return await U(t,i);case"cancel_request":return await h(t,i);case"remove_friend":return await D(t,s);default:return a.NextResponse.json({error:"Invalid action"},{status:400})}}catch(e){return console.error("‚ùå Error handling friend action:",e),a.NextResponse.json({error:"Failed to process friend action"},{status:500})}}async function y(e,r){return(console.log("\uD83D\uDCDD Registering/updating Privy user:",{userIdentifier:e,userData:r}),await g(e,r))?a.NextResponse.json({success:!0,message:"User registered/updated successfully"}):a.NextResponse.json({error:"Failed to register/update user"},{status:500})}async function q(e,r){console.log("\uD83D\uDCE4 Sending friend request:",{fromUserIdentifier:e,toUsername:r});try{let{db:t}=await c(),s=await t.collection("users").findOne({username:{$regex:RegExp(`^${r}$`,"i")}});if(console.log("\uD83D\uDD0D Debug - Target user lookup:",{toUsername:r,targetUser:s?{userIdentifier:s.userIdentifier,username:s.username,displayName:s.displayName,keys:Object.keys(s)}:null}),!s)return a.NextResponse.json({error:"User not found. Only authenticated TurfLoot users can receive friend requests."},{status:404});let n=s.userIdentifier;console.log("‚úÖ Found target user in database:",{toUsername:r,toUserIdentifier:n});let i=await t.collection("users").findOne({userIdentifier:e});if(console.log("\uD83D\uDD0D Debug - Sender user lookup:",{fromUserIdentifier:e,fromUser:i?{userIdentifier:i.userIdentifier,username:i.username,displayName:i.displayName,keys:Object.keys(i)}:null}),!i)return a.NextResponse.json({error:"Sender user not found in database"},{status:404});if(await t.collection("friend_requests").findOne({$or:[{fromUserIdentifier:e,toUserIdentifier:n,status:"pending"},{fromUserId:e,toUserId:n,status:"pending"}]}))return a.NextResponse.json({error:"Friend request already sent to this user"},{status:400});if(await t.collection("friends").findOne({userIdentifier:e,friendUserIdentifier:n}))return a.NextResponse.json({error:"This user is already your friend"},{status:400});let o=`req_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,u=new Date().toISOString(),d={id:o,fromUserIdentifier:e,fromUserId:e,fromUsername:i.username,toUserIdentifier:n,toUserId:n,toUsername:s.username,sentAt:u,status:"pending"};return await t.collection("friend_requests").insertOne(d),console.log("‚úÖ Friend request stored in database successfully"),a.NextResponse.json({success:!0,message:`Friend request sent to ${r}`,request:{id:o,toUsername:r,sentAt:u,status:"pending"}})}catch(e){return console.error("‚ùå Error sending friend request:",e),a.NextResponse.json({error:"Failed to send friend request"},{status:500})}}async function I(e,r){console.log("‚úÖ Accepting friend request:",{userIdentifier:e,requestId:r});try{let{db:t}=await c(),s=await t.collection("friend_requests").findOne({id:r,$or:[{toUserIdentifier:e},{toUserId:e}],status:"pending"});if(!s)return a.NextResponse.json({error:"Friend request not found"},{status:404});let n=s.fromUserIdentifier,i=s.fromUsername,o=s.toUsername,u=await t.collection("users").findOne({userIdentifier:e}),d=await t.collection("users").findOne({userIdentifier:n});if(!u||!d)return a.NextResponse.json({error:"One or both users not found in database"},{status:404});await t.collection("friend_requests").deleteOne({id:r});let l=new Date().toISOString(),f={userIdentifier:e,friendUserIdentifier:n,friendUsername:i,status:"accepted",addedAt:l,lastSeen:d.lastSeenAt||l,isOnline:d.isOnline||!1},p={userIdentifier:n,friendUserIdentifier:e,friendUsername:o,status:"accepted",addedAt:l,lastSeen:u.lastSeenAt||l,isOnline:u.isOnline||!0};return await t.collection("friends").insertMany([f,p]),console.log("‚úÖ Friend request accepted, friendship stored in database"),a.NextResponse.json({success:!0,message:`You and ${i} are now friends!`,friend:{userIdentifier:n,username:i,status:"accepted",addedAt:l,isOnline:d.isOnline||!1}})}catch(e){return console.error("‚ùå Error accepting friend request:",e),a.NextResponse.json({error:"Failed to accept friend request"},{status:500})}}async function U(e,r){console.log("‚ùå Declining friend request:",{userIdentifier:e,requestId:r});try{let{db:t}=await c(),s=await t.collection("friend_requests").deleteOne({id:r,$or:[{toUserIdentifier:e},{toUserId:e}],status:"pending"});if(0===s.deletedCount)return a.NextResponse.json({error:"Friend request not found"},{status:404});return console.log("‚úÖ Friend request declined and removed from database"),a.NextResponse.json({success:!0,message:"Friend request declined"})}catch(e){return console.error("‚ùå Error declining friend request:",e),a.NextResponse.json({error:"Failed to decline friend request"},{status:500})}}async function h(e,r){console.log("\uD83D\uDEAB Canceling friend request:",{userIdentifier:e,requestId:r});try{let{db:t}=await c(),s=await t.collection("friend_requests").deleteOne({id:r,$or:[{fromUserIdentifier:e},{fromUserId:e}],status:"pending"});if(0===s.deletedCount)return a.NextResponse.json({error:"Friend request not found"},{status:404});return console.log("‚úÖ Friend request canceled and removed from database"),a.NextResponse.json({success:!0,message:"Friend request canceled"})}catch(e){return console.error("‚ùå Error canceling friend request:",e),a.NextResponse.json({error:"Failed to cancel friend request"},{status:500})}}async function D(e,r){console.log("\uD83D\uDDD1Ô∏è Removing friend:",{userIdentifier:e,friendIdentifier:r});try{let{db:t}=await c(),s=await t.collection("friends").deleteOne({userIdentifier:e,friendUserIdentifier:r}),n=await t.collection("friends").deleteOne({userIdentifier:r,friendUserIdentifier:e});if(0===s.deletedCount&&0===n.deletedCount)return a.NextResponse.json({error:"Friendship not found"},{status:404});return console.log("‚úÖ Friendship removed from database"),a.NextResponse.json({success:!0,message:"Friend removed successfully"})}catch(e){return console.error("‚ùå Error removing friend:",e),a.NextResponse.json({error:"Failed to remove friend"},{status:500})}}async function x(e){try{let{action:r,userIdentifier:t,equippedSkin:s}=await e.json();if(console.log("‚öôÔ∏è Friends PUT request:",{action:r,userIdentifier:t}),!t||"guest"===t)return a.NextResponse.json({error:"User authentication required"},{status:401});if("update_equipped_skin"===r){let{db:e}=await c(),r=await e.collection("users").updateOne({userIdentifier:t},{$set:{equippedSkin:s,lastSkinUpdate:new Date().toISOString()}});if(0===r.matchedCount)return a.NextResponse.json({error:"User not found"},{status:404});return console.log("‚úÖ Equipped skin updated for user:",t,s),a.NextResponse.json({success:!0,message:"Equipped skin updated successfully",equippedSkin:s})}return a.NextResponse.json({error:"Invalid action"},{status:400})}catch(e){return console.error("‚ùå Error handling PUT request:",e),a.NextResponse.json({error:"Failed to process request"},{status:500})}}let N=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/friends/route",pathname:"/api/friends",filename:"route",bundlePath:"app/api/friends/route"},resolvedPagePath:"/app/frontend/app/api/friends/route.js",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:j,staticGenerationAsyncStorage:R,serverHooks:O}=N,A="/api/friends/route";function $(){return(0,o.patchFetch)({serverHooks:O,staticGenerationAsyncStorage:R})}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[8948,5972],()=>t(24283));module.exports=s})();