"use strict";(()=>{var e={};e.id=223,e.ids=[223],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},91228:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>O,patchFetch:()=>f,requestAsyncStorage:()=>y,routeModule:()=>S,serverHooks:()=>v,staticGenerationAsyncStorage:()=>A});var s={};r.r(s),r.d(s,{GET:()=>h,OPTIONS:()=>m,POST:()=>w});var a=r(49303),n=r(88716),o=r(60670),i=r(87070),u=r(38013);let c=null,l=null;async function d(){if(l)return l;try{return c||(c=new u.MongoClient(process.env.MONGO_URL,{serverSelectionTimeoutMS:5e3,connectTimeoutMS:1e4,maxPoolSize:20}),await c.connect()),l=c.db(process.env.DB_NAME||"turfloot_db")}catch(e){throw console.error("❌ Database connection error:",e),e}}class p{static async ensureUserExists(e,t,r=null){try{let s=await d(),a=await s.collection("users").findOne({id:e});if(a)return a.username!==t&&(await s.collection("users").updateOne({id:e},{$set:{username:t,email:r,updatedAt:new Date().toISOString()}}),console.log(`✅ Updated user: ${e} (${t})`)),a;let n={id:e,username:t||`User_${Date.now()}`,email:r,privyId:e.startsWith("did:privy:")?e:null,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),isPrivyUser:e.startsWith("did:privy:"),lastActive:new Date().toISOString()};return await s.collection("users").insertOne(n),console.log(`✅ Registered new user: ${e} (${t})`),n}catch(e){throw console.error("❌ Error ensuring user exists:",e),e}}static async getUser(e){try{let t=await d();return await t.collection("users").findOne({id:e})}catch(e){return console.error("❌ Error getting user:",e),null}}static async updateLastActive(e){try{let t=await d();await t.collection("users").updateOne({id:e},{$set:{lastActive:new Date().toISOString()}})}catch(e){console.error("❌ Error updating last active:",e)}}static async getAllUsers(){try{let e=await d();return await e.collection("users").find({}).toArray()}catch(e){return console.error("❌ Error getting all users:",e),[]}}static async updateUserProfile(e,t){try{let r=await d(),s=await r.collection("users").updateOne({id:e},{$set:{...t,updatedAt:new Date().toISOString()}});return console.log(`✅ Updated profile for user: ${e}`),s.modifiedCount>0}catch(e){return console.error("❌ Error updating user profile:",e),!1}}}let g={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With, Accept, Origin","Cache-Control":"no-store, no-cache, must-revalidate","X-API-Server":"TurfLoot-UserRegistration"};async function m(){return new i.NextResponse(null,{status:200,headers:g})}async function w(e){try{let{userId:t,username:r,email:s}=await e.json();if(console.log("\uD83D\uDC64 User registration/update request:",{userId:t,username:r,email:s}),!t)return i.NextResponse.json({error:"userId is required"},{status:400,headers:g});let a=await p.ensureUserExists(t,r,s);return await p.updateLastActive(t),i.NextResponse.json({success:!0,user:{id:a.id,username:a.username,email:a.email,isPrivyUser:a.isPrivyUser,createdAt:a.createdAt},message:"User registered/updated successfully",timestamp:new Date().toISOString()},{headers:g})}catch(e){return console.error("❌ User registration error:",e),i.NextResponse.json({success:!1,error:e.message||"Failed to register user",timestamp:new Date().toISOString()},{status:500,headers:g})}}async function h(e){try{let t=new URL(e.url).searchParams.get("userId");if(!t)return i.NextResponse.json({error:"userId parameter is required"},{status:400,headers:g});let r=await p.getUser(t);if(!r)return i.NextResponse.json({error:"User not found"},{status:404,headers:g});return i.NextResponse.json({success:!0,user:{id:r.id,username:r.username,email:r.email,isPrivyUser:r.isPrivyUser,createdAt:r.createdAt,lastActive:r.lastActive},timestamp:new Date().toISOString()},{headers:g})}catch(e){return console.error("❌ Get user error:",e),i.NextResponse.json({success:!1,error:e.message||"Failed to get user",timestamp:new Date().toISOString()},{status:500,headers:g})}}let S=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/users-api/register/route",pathname:"/users-api/register",filename:"route",bundlePath:"app/users-api/register/route"},resolvedPagePath:"/app/frontend/app/users-api/register/route.js",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:y,staticGenerationAsyncStorage:A,serverHooks:v}=S,O="/users-api/register/route";function f(){return(0,o.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:A})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[8948,5972],()=>r(91228));module.exports=s})();