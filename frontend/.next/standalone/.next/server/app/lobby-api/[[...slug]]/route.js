"use strict";(()=>{var e={};e.id=1690,e.ids=[1690],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},85974:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>I,patchFetch:()=>P,requestAsyncStorage:()=>w,routeModule:()=>g,serverHooks:()=>S,staticGenerationAsyncStorage:()=>h});var o={};r.r(o),r.d(o,{GET:()=>y,OPTIONS:()=>d,POST:()=>p});var a=r(49303),s=r(88716),n=r(60670),i=r(87070),l=r(90879),u=r(38013);async function c(){try{let e=new u.MongoClient(process.env.MONGO_URL,{serverSelectionTimeoutMS:5e3,connectTimeoutMS:1e4});return await e.connect(),e.db(process.env.DB_NAME||"turfloot_db")}catch(e){throw console.error("❌ Database connection error:",e),e}}let b={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With, Accept, Origin","Cache-Control":"no-store, no-cache, must-revalidate","X-API-Server":"TurfLoot-LobbyAPI-PartyIntegrated"};async function d(){return new i.NextResponse(null,{status:200,headers:b})}class m{static async createPartyLobby(e,t,r){let o=await c(),a=await l.W.getUserParty(e),s=`lobby_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,n={id:s,ownerId:e,roomType:t,entryFee:r,partyId:a?.id||null,partyMembers:a?a.members.map(e=>e.id):[e],status:"waiting",maxPlayers:a?a.memberCount:1,currentPlayers:[],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await o.collection("lobbies").insertOne(n),a&&(console.log(`🎮 Party lobby created: ${s} for ${t} room with ${a.memberCount} members`),a.members.forEach(e=>{console.log(`🔔 Notifying party member ${e.username} about ${t} room`)})),{success:!0,lobbyId:s,lobby:n,partySize:a?.memberCount||1}}static async joinRoomWithParty(e,t,r){let o=await c(),a=await l.W.getUserParty(e);if(!a)return await this.joinRoomSolo(e,t,r);if("owner"!==a.userRole)throw Error("Only party owner can choose rooms for the party");let s=await this.createPartyLobby(e,t,r),n=a.members.map(e=>({id:`player_${Date.now()}_${Math.random().toString(36).substr(2,6)}`,lobbyId:s.lobbyId,userId:e.id,username:e.username,role:e.role,status:"ready",joinedAt:new Date().toISOString()}));return await o.collection("lobby_players").insertMany(n),await o.collection("lobbies").updateOne({id:s.lobbyId},{$set:{currentPlayers:a.members.map(e=>e.id),status:"ready",updatedAt:new Date().toISOString()}}),console.log(`🎮 Party of ${a.memberCount} joining ${t} room together`),{success:!0,lobbyId:s.lobbyId,roomType:t,entryFee:r,partyMembers:a.members,message:`Party of ${a.memberCount} joining ${t} room`}}static async joinRoomSolo(e,t,r){let o=await c(),a=`lobby_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,s={id:a,ownerId:e,roomType:t,entryFee:r,partyId:null,partyMembers:[e],status:"ready",maxPlayers:1,currentPlayers:[e],createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return await o.collection("lobbies").insertOne(s),console.log(`🎮 Solo player joining ${t} room`),{success:!0,lobbyId:a,roomType:t,entryFee:r,partyMembers:[],message:`Joining ${t} room solo`}}static async getLobbyStatus(e){let t=await c(),[r,o]=await Promise.all([t.collection("lobbies").findOne({id:e}),t.collection("lobby_players").find({lobbyId:e}).toArray()]);if(!r)throw Error("Lobby not found");return{lobby:r,players:o.map(e=>({userId:e.userId,username:e.username,role:e.role,status:e.status}))}}}async function y(e,{params:t}){let{slug:r}=t,o=new URL(e.url);console.log("\uD83C\uDFAE LOBBY-API GET:",r,o.searchParams.toString());try{let e=r[0]||"status";if("status"===e){let e=o.searchParams.get("lobbyId");if(!e)return i.NextResponse.json({error:"lobbyId required"},{status:400,headers:b});let t=await m.getLobbyStatus(e);return i.NextResponse.json({...t,timestamp:new Date().toISOString()},{headers:b})}return i.NextResponse.json({error:"Invalid action"},{status:400,headers:b})}catch(e){return console.error("❌ Lobby API GET error:",e),i.NextResponse.json({error:e.message||"Internal error"},{status:500,headers:b})}}async function p(e,{params:t}){let{slug:r}=t;console.log("\uD83C\uDFAE LOBBY-API POST:",r);try{let t=await e.json(),o=r[0]||"create";if("create"===o){let{userId:e,roomType:r,entryFee:o}=t;if(console.log(`🏰 Creating lobby for room type: ${r}`),!e||!r)return i.NextResponse.json({error:"userId and roomType required"},{status:400,headers:b});let a=await m.joinRoomWithParty(e,r,o||0);return i.NextResponse.json({success:!0,message:a.message,lobbyId:a.lobbyId,roomType:a.roomType,entryFee:a.entryFee,partySize:a.partyMembers.length,partyMembers:a.partyMembers,timestamp:new Date().toISOString()},{headers:b})}if("join-room"===o){let{userId:e,roomType:r,entryFee:o}=t;if(!e||!r)return i.NextResponse.json({error:"userId and roomType required"},{status:400,headers:b});let a=await m.joinRoomWithParty(e,r,o||0);return i.NextResponse.json({success:!0,...a,timestamp:new Date().toISOString()},{headers:b})}return i.NextResponse.json({error:"Invalid action"},{status:400,headers:b})}catch(e){return console.error("❌ Lobby API POST error:",e),i.NextResponse.json({error:e.message||"Failed to create lobby",timestamp:new Date().toISOString()},{status:500,headers:b})}}let g=new a.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/lobby-api/[[...slug]]/route",pathname:"/lobby-api/[[...slug]]",filename:"route",bundlePath:"app/lobby-api/[[...slug]]/route"},resolvedPagePath:"/app/frontend/app/lobby-api/[[...slug]]/route.js",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:w,staticGenerationAsyncStorage:h,serverHooks:S}=g,I="/lobby-api/[[...slug]]/route";function P(){return(0,n.patchFetch)({serverHooks:S,staticGenerationAsyncStorage:h})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[8948,5972,879],()=>r(85974));module.exports=o})();