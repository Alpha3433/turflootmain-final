"use strict";(()=>{var e={};e.id=3690,e.ids=[3690],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78894:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>h,patchFetch:()=>j,requestAsyncStorage:()=>D,routeModule:()=>P,serverHooks:()=>N,staticGenerationAsyncStorage:()=>x});var n={};r.r(n),r.d(n,{DELETE:()=>g,GET:()=>p,POST:()=>y});var a=r(49303),s=r(88716),i=r(60670),o=r(87070),l=r(38013);let u=null,c=null;async function d(){if(u&&c)return{client:u,db:c};let e=new l.MongoClient(process.env.MONGO_URL);await e.connect();let t=e.db(process.env.DB_NAME||"turfloot_db");return u=e,c=t,{client:e,db:t}}async function p(e){try{let{searchParams:t}=new URL(e.url),r=t.get("userIdentifier"),n=t.get("type");if(console.log("\uD83C\uDFAF Party GET request:",{userIdentifier:r,requestType:n}),"public"===n){let{db:e}=await d(),t=(await e.collection("parties").find({privacy:"public",status:"waiting"}).toArray()).filter(e=>Array.isArray(e.currentPlayers)&&e.currentPlayers.length<(e.maxPlayers||2)),r=await Promise.all(t.map(async t=>{let r=await e.collection("users").find({userIdentifier:{$in:t.currentPlayers}}).toArray();return{id:t.id,name:t.name,privacy:t.privacy,maxPlayers:t.maxPlayers,currentPlayerCount:t.currentPlayers.length,createdBy:t.createdBy,createdByUsername:t.createdByUsername,createdAt:t.createdAt,members:r.map(e=>({userIdentifier:e.userIdentifier,username:e.username||e.displayName||"Unknown User",isOnline:e.isOnline||!1,equippedSkin:e.equippedSkin||{type:"circle",color:"#3b82f6",pattern:"solid"}}))}}));return console.log("‚úÖ Public parties retrieved:",r.length,"parties"),o.NextResponse.json({success:!0,parties:r,count:r.length})}if(!r||"guest"===r)return o.NextResponse.json({success:!0,invites:[],message:"Please log in to see party invites"});if("invites"===n){let{db:e}=await d(),t=await e.collection("party_invites").find({toUserIdentifier:r,status:"pending"}).toArray();return console.log("‚úÖ Party invites retrieved:",t.length,"invites"),o.NextResponse.json({success:!0,invites:t,count:t.length})}if("current"===n){let{db:e}=await d(),t=await e.collection("parties").findOne({currentPlayers:r,status:{$ne:"finished"}});if(!t)return console.log("‚ÑπÔ∏è No current party found for user"),o.NextResponse.json({success:!0,party:null});{let r=await e.collection("users").find({userIdentifier:{$in:t.currentPlayers}}).toArray(),n={...t,members:r.map(e=>({userIdentifier:e.userIdentifier,username:e.username||e.displayName||"Unknown User",isOnline:e.isOnline||!1,equippedSkin:e.equippedSkin||{type:"circle",color:"#3b82f6",pattern:"solid"}}))};return console.log("‚úÖ Current party retrieved:",{partyId:t.id,partyName:t.name,memberCount:t.currentPlayers.length}),o.NextResponse.json({success:!0,party:n})}}if("friends"===n){let{db:e}=await d(),t=(await e.collection("friends").find({$or:[{userIdentifier:r,status:"accepted"},{friendIdentifier:r,status:"accepted"}]}).toArray()).map(e=>e.userIdentifier===r?e.friendIdentifier:e.userIdentifier),n=await e.collection("parties").find({privacy:"private",status:"waiting",createdBy:{$in:t},currentPlayers:{$exists:!0,$type:"array"},$expr:{$lt:[{$size:"$currentPlayers"},"$maxPlayers"]}}).toArray(),a=await Promise.all(n.map(async t=>{let r=await e.collection("users").find({userIdentifier:{$in:t.currentPlayers}}).toArray();return{id:t.id,name:t.name,privacy:t.privacy,maxPlayers:t.maxPlayers,currentPlayerCount:t.currentPlayers.length,createdBy:t.createdBy,createdByUsername:t.createdByUsername,createdAt:t.createdAt,members:r.map(e=>({userIdentifier:e.userIdentifier,username:e.username||e.displayName||"Unknown User",isOnline:e.isOnline||!1,equippedSkin:e.equippedSkin||{type:"circle",color:"#3b82f6",pattern:"solid"}}))}}));return console.log("‚úÖ Friends parties retrieved:",a.length,"parties"),o.NextResponse.json({success:!0,parties:a,count:a.length})}return o.NextResponse.json({success:!0,invites:[],count:0})}catch(e){return console.error("‚ùå Error fetching party data:",e),o.NextResponse.json({error:"Failed to fetch party data"},{status:500})}}async function y(e){try{let{action:t,userIdentifier:r,partyData:n,invitedFriends:a,inviteId:s,partyId:i}=await e.json();if(console.log("\uD83C\uDFAF Party API request:",{action:t,userIdentifier:r,partyData:n,invitedFriendsCount:a?.length}),"cleanup_test_parties"===t)return await w();if(!r||"guest"===r)return o.NextResponse.json({error:"User authentication required"},{status:401});switch(t){case"create_and_invite":return await m(r,n,a);case"accept_invite":return await f(r,s,i);case"join_party":return await v(r,i);case"cleanup_test_parties":return await w();default:return o.NextResponse.json({error:"Invalid action"},{status:400})}}catch(e){return console.error("‚ùå Error handling party request:",e),o.NextResponse.json({error:"Failed to process party request"},{status:500})}}async function m(e,t,r){try{let{db:n}=await d();console.log("\uD83D\uDD0D Debug: Looking for user with userIdentifier:",e);let a=await n.collection("users").findOne({userIdentifier:e}),s="userIdentifier";if(a||(a=await n.collection("users").findOne({email:e}),s="email"),a||(a=await n.collection("users").findOne({walletAddress:e}),s="walletAddress"),a||(a=await n.collection("users").findOne({$or:[{userIdentifier:e},{email:e},{walletAddress:e},{id:e},{_id:e}]}),s="flexible"),console.log("\uD83D\uDD0D Debug: User lookup result:",a?`Found via ${s}`:"Not found"),!a){let e=await n.collection("users").find().limit(3).toArray();return console.log("\uD83D\uDD0D Debug: Sample user documents:",e.map(e=>({fields:Object.keys(e),userIdentifier:e.userIdentifier,email:e.email,walletAddress:e.walletAddress}))),o.NextResponse.json({error:"User not found in database. Check server logs for debugging info."},{status:404})}let i=`party_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,l=new Date().toISOString(),u={id:i,name:t.name,createdBy:e,createdByUsername:a.username,privacy:t.privacy||"public",maxPlayers:t.maxPlayers||2,currentPlayers:[e],status:"waiting",createdAt:l,invitedPlayers:r.map(e=>e.id)};await n.collection("parties").insertOne(u);let c=r.map(async r=>{console.log("\uD83D\uDD0D Debug: Processing friend invite for:",r);let s=await n.collection("users").findOne({userIdentifier:r.id});if(s||(s=await n.collection("users").findOne({$or:[{userIdentifier:r.id},{email:r.id},{walletAddress:r.id}]})),!s){console.log(`‚ö†Ô∏è Warning: Friend ${r.username} (${r.id}) not found in database, skipping invite`);return}let o={id:`invite_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,type:"party_invite",partyId:i,partyName:t.name,fromUserIdentifier:e,fromUsername:a.username||a.displayName||"Unknown User",toUserIdentifier:r.id,toUsername:r.username||s.username||s.displayName||"Unknown Friend",sentAt:l,status:"pending",privacy:t.privacy,maxPlayers:t.maxPlayers};await n.collection("party_invites").insertOne(o),console.log(`üì§ Party invite sent to ${r.username} (${r.id})`)});return await Promise.all(c),console.log("‚úÖ Party created and invites sent:",{partyId:i,partyName:t.name,invitesSent:r.length}),o.NextResponse.json({success:!0,message:`Party "${t.name}" created successfully`,party:{id:i,name:t.name,privacy:t.privacy,maxPlayers:t.maxPlayers,invitesSent:r.length}})}catch(e){return console.error("‚ùå Error creating party and sending invites:",e),o.NextResponse.json({error:"Failed to create party"},{status:500})}}async function f(e,t,r){try{let{db:n}=await d();if(!await n.collection("users").findOne({userIdentifier:e}))return o.NextResponse.json({error:"User not found"},{status:404});let a=await n.collection("party_invites").findOne({id:t,toUserIdentifier:e,status:"pending"});if(!a)return o.NextResponse.json({error:"Party invite not found"},{status:404});return await n.collection("party_invites").deleteOne({id:t}),await n.collection("parties").updateOne({id:r},{$addToSet:{currentPlayers:e}}),console.log("‚úÖ Party invite accepted:",{userIdentifier:e,partyId:r,partyName:a.partyName}),o.NextResponse.json({success:!0,message:`Successfully joined party "${a.partyName}"`,party:{id:r,name:a.partyName}})}catch(e){return console.error("‚ùå Error accepting party invite:",e),o.NextResponse.json({error:"Failed to accept party invite"},{status:500})}}async function g(e){try{let{userIdentifier:t,partyId:r}=await e.json();if(console.log("\uD83D\uDEAA Party LEAVE request:",{userIdentifier:t,partyId:r}),!t||"guest"===t)return o.NextResponse.json({error:"User authentication required"},{status:401});if(!r)return o.NextResponse.json({error:"Party ID required"},{status:400});let{db:n}=await d(),a=await n.collection("parties").findOne({id:r});if(!a)return o.NextResponse.json({error:"Party not found"},{status:404});if(!a.currentPlayers.includes(t))return o.NextResponse.json({error:"User not in this party"},{status:400});let s=a.createdBy===t;if(console.log("\uD83D\uDD0D Checking if user is party owner:",{userIdentifier:t,createdBy:a.createdBy,isOwner:s}),s){console.log("\uD83D\uDC51 Party owner is leaving - deleting entire party"),await n.collection("parties").deleteOne({id:r});let e=await n.collection("party_invites").deleteMany({partyId:r});return console.log("\uD83D\uDDD1Ô∏è Party and related data deleted:",{partyId:r,partyName:a.name,invitesRemoved:e.deletedCount}),o.NextResponse.json({success:!0,message:`Party "${a.name}" has been disbanded`,partyDisbanded:!0,isOwner:!0})}{console.log("\uD83D\uDC64 Regular member leaving party"),await n.collection("parties").updateOne({id:r},{$pull:{currentPlayers:t}});let e=await n.collection("parties").findOne({id:r});if(0===e.currentPlayers.length)return await n.collection("parties").deleteOne({id:r}),await n.collection("party_invites").deleteMany({partyId:r}),console.log("\uD83C\uDFC1 Party deleted - no remaining members after member left"),o.NextResponse.json({success:!0,message:`Party "${a.name}" has been disbanded - no members remaining`,partyDisbanded:!0,isOwner:!1});return console.log("‚úÖ Member successfully left party:",{userIdentifier:t,partyId:r,partyName:a.name,remainingMembers:e.currentPlayers.length}),o.NextResponse.json({success:!0,message:`Successfully left party "${a.name}"`,remainingMembers:e.currentPlayers.length,partyDisbanded:!1,isOwner:!1})}}catch(e){return console.error("‚ùå Error leaving party:",e),o.NextResponse.json({error:"Failed to leave party"},{status:500})}}async function w(){try{let{db:e}=await d(),t={$or:[/test.*party/i,/dynamic.*display/i,/skin.*avatar.*test/i,/avatar.*display/i,/test.*user.*lookup/i].map(e=>({name:{$regex:e}}))},r=await e.collection("parties").find(t).toArray();console.log("\uD83E\uDDF9 Found test parties to remove:",r.map(e=>({id:e.id,name:e.name})));let n=await e.collection("parties").deleteMany(t),a=r.map(e=>e.id);if(a.length>0){let t=await e.collection("party_invites").deleteMany({partyId:{$in:a}});console.log("\uD83E\uDDF9 Removed related party invites:",t.deletedCount)}return console.log("‚úÖ Test party cleanup completed:",{partiesRemoved:n.deletedCount,invitesRemoved:a.length>0?await e.collection("party_invites").countDocuments({partyId:{$in:a}}):0}),o.NextResponse.json({success:!0,message:`Cleanup completed: ${n.deletedCount} test parties removed`,partiesRemoved:n.deletedCount})}catch(e){return console.error("‚ùå Error cleaning up test parties:",e),o.NextResponse.json({error:"Failed to cleanup test parties"},{status:500})}}async function v(e,t){try{if(console.log("\uD83D\uDE80 Handling join party request:",{userIdentifier:e,partyId:t}),!t)return o.NextResponse.json({error:"Party ID is required"},{status:400});let{db:r}=await d(),n=await r.collection("parties").findOne({id:t});if(!n)return o.NextResponse.json({error:"Party not found"},{status:404});if("waiting"!==n.status)return o.NextResponse.json({error:"Party is no longer accepting new members"},{status:400});if(n.currentPlayers.length>=n.maxPlayers)return o.NextResponse.json({error:"Party is full"},{status:400});if(n.currentPlayers.includes(e))return o.NextResponse.json({error:"You are already in this party"},{status:400});await r.collection("parties").updateOne({id:t},{$push:{currentPlayers:e}});let a=await r.collection("parties").findOne({id:t}),s=await r.collection("users").find({userIdentifier:{$in:a.currentPlayers}}).toArray(),i={id:a.id,name:a.name,privacy:a.privacy,maxPlayers:a.maxPlayers,currentPlayerCount:a.currentPlayers.length,members:s.map(e=>({userIdentifier:e.userIdentifier,username:e.username||e.displayName||"Unknown User",isOnline:e.isOnline||!0,equippedSkin:e.equippedSkin||{type:"circle",color:"#3b82f6",pattern:"solid"}}))};return console.log("‚úÖ User successfully joined party:",{userIdentifier:e,partyId:t,partyName:n.name,newMemberCount:a.currentPlayers.length}),o.NextResponse.json({success:!0,message:`Successfully joined "${n.name}"`,party:i})}catch(e){return console.error("‚ùå Error joining party:",e),o.NextResponse.json({error:"Failed to join party"},{status:500})}}let P=new a.AppRouteRouteModule({definition:{kind:s.x.APP_ROUTE,page:"/api/party/route",pathname:"/api/party",filename:"route",bundlePath:"app/api/party/route"},resolvedPagePath:"/app/frontend/app/api/party/route.js",nextConfigOutput:"standalone",userland:n}),{requestAsyncStorage:D,staticGenerationAsyncStorage:x,serverHooks:N}=P,h="/api/party/route";function j(){return(0,i.patchFetch)({serverHooks:N,staticGenerationAsyncStorage:x})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),n=t.X(0,[8948,5972],()=>r(78894));module.exports=n})();