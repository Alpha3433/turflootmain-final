"use strict";(()=>{var e={};e.id=661,e.ids=[661],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},60176:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>y,patchFetch:()=>f,requestAsyncStorage:()=>m,routeModule:()=>p,serverHooks:()=>v,staticGenerationAsyncStorage:()=>g});var o={};s.r(o),s.d(o,{GET:()=>d,POST:()=>c});var r=s(49303),n=s(88716),a=s(60670),i=s(87070),u=s(38013);async function l(){let e=new u.MongoClient(process.env.MONGO_URL);return await e.connect(),{client:e,db:e.db("turfloot")}}async function c(e){try{let{action:t,session:s,roomId:o,lastActivity:r}=await e.json();console.log(`🎮 Game session tracking: ${t}`,{roomId:o,session:s});let{client:n,db:a}=await l(),u=a.collection("game_sessions");if("join"===t){if(!s||!s.roomId)return i.NextResponse.json({error:"Missing session data"},{status:400});let e={...s,userId:s.userId||"anonymous",joinedAt:new Date(s.joinedAt),lastActivity:new Date(s.lastActivity),status:"active"};console.log("\uD83D\uDCBE Storing session document:",JSON.stringify(e,null,2)),await u.updateOne({roomId:s.roomId,userId:e.userId},{$set:e},{upsert:!0}),console.log(`✅ Player session recorded for room ${s.roomId}`)}else if("update"===t){if(!o||!r)return i.NextResponse.json({error:"Missing roomId or lastActivity"},{status:400});await u.updateMany({roomId:o,status:"active"},{$set:{lastActivity:new Date(r)}}),console.log(`🔄 Updated activity for room ${o}`)}else{if("leave"!==t)return i.NextResponse.json({error:"Invalid action"},{status:400});if(!o)return i.NextResponse.json({error:"Missing roomId"},{status:400});await u.updateMany({roomId:o,status:"active"},{$set:{status:"left",leftAt:new Date}}),console.log(`👋 Player left room ${o}`)}return await n.close(),i.NextResponse.json({success:!0,action:t,message:`Session ${t} completed successfully`})}catch(e){return console.error("❌ Error in game-sessions API:",e),i.NextResponse.json({error:"Internal server error",message:e.message},{status:500})}}async function d(e){try{let{client:e,db:t}=await l(),s=t.collection("game_sessions"),o=new Date(Date.now()-3e5),r=await s.find({status:"active",lastActivity:{$gte:o}}).toArray(),n={};return r.forEach(e=>{n[e.roomId]||(n[e.roomId]=[]),n[e.roomId].push({userId:e.userId,joinedAt:e.joinedAt,lastActivity:e.lastActivity,entryFee:e.entryFee,mode:e.mode,region:e.region})}),await e.close(),i.NextResponse.json({totalActiveSessions:r.length,sessionsByRoom:n,timestamp:new Date().toISOString()})}catch(e){return console.error("❌ Error getting game sessions:",e),i.NextResponse.json({error:"Internal server error",message:e.message},{status:500})}}let p=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/game-sessions/route",pathname:"/api/game-sessions",filename:"route",bundlePath:"app/api/game-sessions/route"},resolvedPagePath:"/app/frontend/app/api/game-sessions/route.js",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:m,staticGenerationAsyncStorage:g,serverHooks:v}=p,y="/api/game-sessions/route";function f(){return(0,a.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:g})}}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),o=t.X(0,[8948,5972],()=>s(60176));module.exports=o})();