"use strict";(()=>{var e={};e.id=5695,e.ids=[5695],e.modules={38013:e=>{e.exports=require("mongodb")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},99729:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>P,patchFetch:()=>S,requestAsyncStorage:()=>f,routeModule:()=>y,serverHooks:()=>I,staticGenerationAsyncStorage:()=>h});var s={};r.r(s),r.d(s,{GET:()=>m,OPTIONS:()=>c,POST:()=>g});var a=r(49303),n=r(88716),o=r(60670),i=r(87070),u=r(90879);let d={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization, X-Requested-With, Accept, Origin","Cache-Control":"no-store, no-cache, must-revalidate","X-API-Server":"TurfLoot-PartyAPI"};async function c(){return new i.NextResponse(null,{status:200,headers:d})}let p=!1;async function l(){p||(await u.W.initializeCollections(),p=!0)}async function m(e,{params:t}){await l();let{slug:r}=t,s=new URL(e.url);console.log("\uD83C\uDF89 PARTY-API GET:",r,s.searchParams.toString());try{let e=r[0]||"current",t=s.searchParams.get("userId");if(!t)return i.NextResponse.json({error:"userId required"},{status:400,headers:d});if("current"===e)try{console.log(`🎯 Fetching current party for user: ${t}`);let e=await u.W.getUserParty(t);return console.log(`🎯 Party fetch result:`,{hasParty:!!e,partyId:e?.id,partyName:e?.name,memberCount:e?.memberCount}),i.NextResponse.json({party:e,hasParty:!!e,timestamp:new Date().toISOString()},{headers:d})}catch(e){return console.error(`❌ Error fetching party status for user ${t}:`,e),i.NextResponse.json({party:null,hasParty:!1,error:`Party status fetch failed: ${e.message}`,timestamp:new Date().toISOString()},{status:500,headers:d})}if("invitations"===e){let e=await u.W.getPendingInvitations(t);return i.NextResponse.json({invitations:e,count:e.length,timestamp:new Date().toISOString()},{headers:d})}if("invitable-friends"===e){let e=s.searchParams.get("partyId");if(!e)return i.NextResponse.json({error:"partyId required"},{status:400,headers:d});let r=await u.W.getInvitableFriends(t,e);return i.NextResponse.json({friends:r,count:r.length,timestamp:new Date().toISOString()},{headers:d})}if("notifications"===e)try{console.log(`📢 Fetching notifications for user: ${t}`);let e=await u.W.getPartyNotifications(t);return i.NextResponse.json({success:!0,notifications:e.notifications||[],count:e.count||0,timestamp:new Date().toISOString()},{headers:d})}catch(e){return console.error(`❌ Error fetching notifications:`,e),i.NextResponse.json({success:!1,notifications:[],count:0,error:`Notification fetch failed: ${e.message}`,timestamp:new Date().toISOString()},{status:500,headers:d})}return i.NextResponse.json({error:"Invalid action"},{status:400,headers:d})}catch(e){return console.error("❌ Party API GET error:",e),i.NextResponse.json({error:e.message||"Internal error",code:e.code||500},{status:e.code||500,headers:d})}}async function g(e,{params:t}){await l();let{slug:r}=t;console.log("\uD83C\uDF89 PARTY-API POST:",r);try{let t=await e.json(),s=r[0]||"create";if("create"===s){let{ownerId:e,ownerUsername:r,partyName:s}=t;if(!e||!r)return i.NextResponse.json({error:"ownerId and ownerUsername required"},{status:400,headers:d});let a=await u.W.createParty(e,r,s);return i.NextResponse.json({success:!0,message:"Party created successfully",partyId:a.partyId,party:a.party,timestamp:new Date().toISOString()},{headers:d})}if("invite"===s){let{partyId:e,fromUserId:r,toUserId:s,toUsername:a}=t;if(!e||!r||!s||!a)return i.NextResponse.json({error:"partyId, fromUserId, toUserId, and toUsername required"},{status:400,headers:d});let n=await u.W.inviteFriend(e,r,s,a);return i.NextResponse.json({success:!0,message:"Party invitation sent successfully",invitationId:n.invitationId,timestamp:new Date().toISOString()},{headers:d})}if("accept-invitation"===s){let{invitationId:e,userId:r}=t;if(!e||!r)return i.NextResponse.json({error:"invitationId and userId required"},{status:400,headers:d});let s=await u.W.acceptInvitation(e,r);return i.NextResponse.json({success:!0,message:"Party invitation accepted",partyId:s.partyId,memberCount:s.memberCount,timestamp:new Date().toISOString()},{headers:d})}if("decline-invitation"===s){let{invitationId:e,userId:r}=t;if(!e||!r)return i.NextResponse.json({error:"invitationId and userId required"},{status:400,headers:d});return await u.W.declineInvitation(e,r),i.NextResponse.json({success:!0,message:"Party invitation declined",timestamp:new Date().toISOString()},{headers:d})}if("leave"===s){let{partyId:e,userId:r}=t;if(!e||!r)return i.NextResponse.json({error:"partyId and userId required"},{status:400,headers:d});let s=await u.W.leaveParty(e,r);return i.NextResponse.json({success:!0,message:s.disbanded?"Party disbanded":"Left party successfully",disbanded:s.disbanded,timestamp:new Date().toISOString()},{headers:d})}if("start-game"===s){let{partyId:e,roomType:r,entryFee:s,ownerId:a}=t;if(!e||!r||!a)return i.NextResponse.json({error:"partyId, roomType, and ownerId required"},{status:400,headers:d});let n=await u.W.startPartyGame(e,r,s,a);if(n.success)return i.NextResponse.json({success:!0,message:"Party game started successfully",gameRoomId:n.gameRoomId,partyMembers:n.partyMembers,roomType:n.roomType,entryFee:n.entryFee,timestamp:new Date().toISOString()},{headers:d});return i.NextResponse.json({error:n.error||"Failed to start party game",timestamp:new Date().toISOString()},{status:400,headers:d})}if("mark-notification-seen"===s){let{notificationId:e,userId:r}=t;if(!e||!r)return i.NextResponse.json({error:"notificationId and userId required"},{status:400,headers:d});let s=await u.W.markNotificationSeen(e,r);if(s.success)return i.NextResponse.json({success:!0,message:"Notification marked as seen",timestamp:new Date().toISOString()},{headers:d});return i.NextResponse.json({error:s.error||"Failed to mark notification as seen",timestamp:new Date().toISOString()},{status:400,headers:d})}if("disband"===s){let{partyId:e,ownerId:r}=t;if(!e||!r)return i.NextResponse.json({error:"partyId and ownerId required"},{status:400,headers:d});return await u.W.disbandParty(e),i.NextResponse.json({success:!0,message:"Party disbanded successfully",timestamp:new Date().toISOString()},{headers:d})}return i.NextResponse.json({error:"Invalid action"},{status:400,headers:d})}catch(e){return console.error("❌ Party API POST error:",e),i.NextResponse.json({error:e.message||"Failed to process request",timestamp:new Date().toISOString()},{status:500,headers:d})}}let y=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/party-api/[[...slug]]/route",pathname:"/party-api/[[...slug]]",filename:"route",bundlePath:"app/party-api/[[...slug]]/route"},resolvedPagePath:"/app/frontend/app/party-api/[[...slug]]/route.js",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:f,staticGenerationAsyncStorage:h,serverHooks:I}=y,P="/party-api/[[...slug]]/route";function S(){return(0,o.patchFetch)({serverHooks:I,staticGenerationAsyncStorage:h})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[8948,5972,879],()=>r(99729));module.exports=s})();